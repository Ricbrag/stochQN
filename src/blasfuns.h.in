#cmakedefine HAS_MKL
#cmakedefine HAS_OPENBLAS
#cmakedefine HAS_ATLAS
#cmakedefine HAS_CBLAS
#cmakedefine BLAS_UNDERSCORES
#cmakedefine BLAS_NO_UNDERSCORES 

#if !defined(real_t)
	#if defined(USE_DOUBLE) || !defined(USE_FLOAT)
		#define real_t double
		#define cblas_tscal cblas_tscal
		#define cblas_tdot cblas_tdot
		#define cblas_taxpy cblas_taxpy
		#define cblas_tnrm2 cblas_tnrm2
		#define cblas_tgemv cblas_tgemv
	#else
		#define real_t float
		#define cblas_tscal cblas_sscal
		#define cblas_tdot cblas_sdot
		#define cblas_taxpy cblas_saxpy
		#define cblas_tnrm2 cblas_snrm2
		#define cblas_tgemv cblas_sgemv
	#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

#ifndef CBLAS_ORDER
	typedef enum CBLAS_ORDER     {CblasRowMajor=101, CblasColMajor=102} CBLAS_ORDER;
#endif
#ifndef CBLAS_TRANSPOSE
	typedef enum CBLAS_TRANSPOSE {CblasNoTrans=111, CblasTrans=112, CblasConjTrans=113, CblasConjNoTrans=114} CBLAS_TRANSPOSE;
#endif

#if defined(HAS_MKL) || defined(HAS_OPENBLAS) || defined(HAS_ATLAS) || defined(HAS_CBLAS)

	real_t cblas_tdot(int n, real_t *x, int incx, real_t *y, int incy);
	void cblas_taxpy(int n, real_t a, real_t *x, int incx, real_t *y, int incy);
	void cblas_tscal(int n, real_t alpha, real_t *x, int incx);
	real_t cblas_tnrm2(int n, real_t *x, int incx);
	void cblas_tgemv(const enum CBLAS_ORDER order,  const enum CBLAS_TRANSPOSE trans,  const int m, const int n,
		const real_t alpha, const real_t  *a, const int lda,  const real_t  *x, const int incx,  const real_t beta,  real_t  *y, const int incy);

	#ifdef HAS_MKL
		int mkl_set_num_threads_local(int nthreads);
	#endif
	#ifdef HAS_OPENBLAS
		void openblas_set_num_threads(int nthreads);
	#endif
#else
	#if defined(BLAS_UNDERSCORES)
		#if defined(USE_DOUBLE) || !defined(USE_FLOAT)
			#define tdot ddot_
			#define taxpy daxpy_
			#define tscal dscal_
			#define tnrm2 dnrm2_
			#define tgemv dgemv_
		#else
			#define tdot sdot_
			#define taxpy saxpy_
			#define tscal sscal_
			#define tnrm2 snrm2_
			#define tgemv sgemv_
		#endif
	#else
		#if defined(USE_DOUBLE) || !defined(USE_FLOAT)
			#define tdot ddot
			#define taxpy daxpy
			#define tscal dscal
			#define tnrm2 dnrm2
			#define tgemv dgemv
		#else
			#define tdot sdot
			#define taxpy saxpy
			#define tscal sscal
			#define tnrm2 snrm2
			#define tgemv sgemv
		#endif
	#endif

	real_t cblas_tdot(int n, real_t *x, int incx, real_t *y, int incy) {return tdot(&n, x, &incx, y, &incy);}
	void cblas_taxpy(int n, real_t a, real_t *x, int incx, real_t *y, int incy) {taxpy(&n, &a, x, &incx, y, &incy);}
	void cblas_tscal(int n, real_t alpha, real_t *x, int incx) {tscal(&n, &alpha, x, &incx);}
	real_t cblas_tnrm2(int n, real_t *x, int incx) {return tnrm2(&n, x, &incx);}
	
	/*	A word of warning:
		This 'cblas_tgemv' made from FORTRAN-dgemv will not work for all combinations of inputs and is not designed
		for general-purpose usage, only as a quick equivalence for the way in which it is used in this package.
	*/
	void cblas_tgemv(enum CBLAS_ORDER order, enum CBLAS_TRANSPOSE trans, int m, int n, real_t alpha, real_t *a, int lda,
		real_t *x, int incx, real_t beta, real_t *y, int incy)
	{
		char T;
		int M, N, LDA;
		if (order == CblasRowMajor) {
			if (trans == CblasNoTrans) { T = 'T'; M = n; N = m; LDA = n; } else { T = 'N'; M = n; N = m; LDA = n; }
		} else {
			M = m; N = n; LDA = lda;
			if (trans == CblasNoTrans) { T = 'N'; } else { T = 'T'; }
		}
		tgemv(&T, &M, &N, &alpha, a, &LDA, x, &incx, &beta, y, &incy);
	}
#endif

#ifdef __cplusplus
}
#endif
